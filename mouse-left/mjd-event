#!/usr/bin/python3
#

# Typical argument:
# /devices/pci0000:00/0000:00:14.0/usb1/1-4/1-4:1.2/0003:046D:C52B.001F/0003:046D:4031.0020/input/input28/event19

import os
import re
import subprocess
import sys

def handedness(usbdev):
    if usbdev == 4:
        return "left"
    elif usbdev == 1 or usbdev == 2:
        return "right"
    else:
        print("Unknown handedness for usbdev", usbdev, file=sys.stderr)
        exit(1)

def lines(command):
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    print(result.stderr.decode(), file=sys.stderr)
    if result.returncode != 0:
        print("command", command, "failed with exit status", result.returncode, file=sys.stderr)
        exit(1)
    ls = re.split(r'\n', result.stdout.decode())
    ls.pop()
    return ls

def device_node(xinput_number):
    node_line = [ line for line in lines(["/usr/bin/xinput", "list-props", str(xinput_number)]) if "Device Node" in line ]
    if len(node_line) == 1:
        print("Found node line for device", xinput_number, ":", node_line[0])
        match = re.search(r'/dev/input/event(\d+)', node_line[0])
        if match:
            return int(match.group(1))
    return None

def find_magic_number(eventnum):
    print("Looking for dev event", eventnum, file=sys.stderr)
    result = lines([ "/usr/bin/xinput", "list", "--id-only" ])
    for n in result:
        print("Trying xinput device", n, file=sys.stderr)
        if eventnum == device_node(n):
            return int(n)

def fix_handedness(hand, xinput_id):
    if hand == "left":
        buttons = ["3", "2", "1"]
    elif hand == "right":
        buttons = ["1", "2", "3"]
    else:
        print("Unknown hand:", hand, file=sys.stderr)
        exit(1)

    print("Setting handedness for xinput device", xinput_id, "to", "hand", file=sys.stderr)
    subprocess.run(["xinput", "set-button-map", str(xinput_id), *buttons], check=True)

if __name__ == '__main__':
    if "DISPLAY" not in os.environ:
        os.environ["DISPLAY"] = ":0"
    os.environ["XAUTHORITY"] = "/home/mjd/.Xauthority"

    sys.stderr = open("/tmp/mjd-event.err", "a")

    if len(sys.argv) != 2:
        print("Usage:", sys.argv[0], "devpath", file=sys.stderr)
        exit(2)
    print("mjd-event", sys.argv, file=sys.stderr)

    devpath = sys.argv[1]
    match = re.search(r'usb1/1-(\d).*input/input\d+/event(\d+)', devpath)
    if not match:
        print(f"Couldn't parse devpath\n\t{devpath}", file=sys.stderr)
        exit(1)

    usbdev, eventnum = match.group(1,2)
    magic_number = find_magic_number(int(eventnum))
    if magic_number is None:
        print(f"Couldn't find any xinput device for event", eventnum, file=sys.stderr)
        exit(1)
    else:
        print("Magic number is", magic_number, file=sys.stderr)
    fix_handedness(handedness(int(usbdev)), magic_number)
