#!/usr/bin/python3
import unittest
from grammar import Grammar

class TestExprs(unittest.TestCase):
    def setUp(self):
        self.parser = Grammar()

    def tryit(self, expr, x_res):
        self.assertEqual(self.parser.parse(expr), x_res)

    def closeEnough(self, expr, x_res):
        self.assertAlmostEqual(self.parser.parse(expr), x_res, 7)
        
    def test_spaces(self):
        self.tryit("1+1", 2)
        self.tryit("1 + 1", 2)
        self.tryit("  1 +1  ", 2)
        self.tryit(" 1+   1", 2)
        
    def test_sum(self):
        self.tryit("1+1", 2)

    def test_precedence(self):
        self.tryit("3+5*4", 23)
        self.tryit("3*5+4", 19)
        self.tryit("3*(5+4)", 27)

    def test_assoc(self):
        self.tryit("8-(4-3)", 7)
        self.tryit("(8-4)-3", 1)
        self.tryit("100/5/2", 10)
        self.tryit("8-4-3", 1)
        
    def test_paren(self):
        self.tryit("3", 3)
        self.tryit("(3)", 3)
        self.tryit("((3))", 3)

    def test_opsym(self):
        self.tryit("8*4", 32)
        self.tryit("8×4", 32)
        self.tryit("8/4", 2)
        self.tryit("8÷4", 2)

    def test_pi(self):
        self.closeEnough("π*2", 6.283185307)
        self.closeEnough("pi*2", 6.283185307)

    def test_pow(self):
        self.tryit("2^4", 16)
        self.tryit("2^2^3", 256)
        self.tryit("2^(2^3)", 256)
        self.tryit("((2^2)^3)", 64)

    def test_assign(self):
        self.tryit("a=7", 7)
        self.tryit("a*2", 14)
        self.tryit("b=(a*a)+a+3", 59)
        self.tryit("d=e=f=12", 12)
        self.tryit("d*10000+e*100+f", 121212)

    def test_float(self):
        self.closeEnough("0.7", 0.7)
        self.closeEnough(".7", 0.7)
        self.closeEnough("1.0", 1)
        self.closeEnough("1.1*0.9", 0.99)

    def test_percentage(self):
        self.tryit("50 + 25%", 62.5)
        self.tryit("50 - 25%", 37.5)
        self.tryit("50 * 25%", 12.5)

    def test_funcall(self):
        self.tryit("sq(12)", 144)
        self.tryit("int(4.3)", 4)
        self.tryit("sqrt(400)", 20)
        self.tryit("sin(pi/2)", 1)
        self.tryit("cos(pi)", -1)
        self.tryit("log(e^2.5)", 2.5)
        self.tryit("log(exp(0.77))", 0.77)
        
if __name__ == '__main__':
   unittest.main()

